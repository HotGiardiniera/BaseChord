syntax = "proto3";

package pb;

// Represents value of data object that client wants to retrieve / store
message Data {
  string data = 1;
}

// Represents name-value of data object that client wants to store
message FileStore {
  string name = 1;
  Data data = 2;
}

// Represents name of data object that client wants to retrieve
message FileGet {
  string name = 1;
}

// Represents name of data object that client wants to delete
message FileDelete {
  string name = 1;
}

// Represent a void message indicating success of file storage
message Success {
}

// Represent a void message indicating file not being located
message FileNotFound {
}

// Represents an error.
message Error {
    string msg = 1;
}

// If an file is on a different server
message Redirect {
    string server = 1;
}

// Represents an operation result.
message Result {
    oneof result {
        Data data = 1;
        Success success = 2;
        FileNotFound notFound = 3;
        Redirect redirect = 4;
    }
}

// File system service
service FileSystem {
    // Get the value associated with a key.
    rpc Get (FileGet) returns (Result) {}
    rpc Store (FileStore) returns (Result) {}
    rpc Delete(FileDelete) returns (Result) {}
}

// Internal representations for operations.
enum Op {
    GET = 0;
    STORE = 1;
    DELETE = 2;
}

// A type for arguments across all operations
message Command {
    Op operation = 1;
    oneof arg {
        FileGet get = 2;
        FileStore store = 3;
        FileDelete delete = 4;
    }
}

// Input to FindSuccessor
message FindSuccessorArgs {
    uint64 id = 1;
    uint32 jumps = 2;  //This is used to track if FindSuccessor request came from previous node.
}

// Output from FindSuccessor
message FindSuccessorRet {
    uint64 successorId = 1;
    string successorIp = 2;
    uint32 jumps = 3;
    uint64 finalDest = 4;
}

// Input to Notify
message NotifyArgs {
    uint64 predecessorId = 1;
    string predecessorIp = 2;
}

//TODO: Notify may not require a response
// Output from Notify
message NotifyRet {
    bool updated = 1;
}

// Input to PingPredecessor
message PingPredecessorArgs {
}

// Output from PingPredecessor
message PingPredecessorRet {
}

// Input to PingSuccessor
message PingSuccessorArgs {
}

// Output from PingSuccessor (successor's predecessor)
message PingSuccessorRet {
    uint64 predecessorId = 1;
    string predecessorIp = 2;
}

// Chord service
service Chord {
    rpc FindSuccessorRPC(FindSuccessorArgs) returns (FindSuccessorRet) {}
    rpc NotifyRPC(NotifyArgs) returns (NotifyRet) {}
    rpc PingPredecessorRPC(PingPredecessorArgs) returns (PingPredecessorRet) {}
    rpc PingSuccessorRPC(PingSuccessorArgs) returns (PingSuccessorRet) {}
}
